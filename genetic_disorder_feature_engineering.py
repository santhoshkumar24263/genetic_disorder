# -*- coding: utf-8 -*-
"""Genetic_Disorder_Feature_Engineering_(1) (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RVqi5YiSMoRW3zHgGeDZpWWCzzNauRqM

<h1 align='center'> Genomes & Genetics </h1>
<h4 align='center'> Predict The Genetic Disorders </h4>
"""

from google.colab import drive
drive.mount('/content/drive')

"""### **Introduction**

Genetic disorders occur when a problem in the baby’s chromosomes or genes causes physical abnormalities or illnesses.

In our body, we have millions of cells. In each cell, there are 46 chromosomes, found in 23 matching pairs. Half of the chromosomes are passed on from a person’s mother, and half from their father. These chromosomes carry our DNA, or genes, which are the instructions for how we look and how our body develops and functions. These instructions range from our eye color to our risk for disease.

When a harmful change occurs in these instructions, it can change the way a baby develops. Babies with genetic disorders can be at risk of slow mental and physical development, physical abnormalities, and lifelong illnesses.

Some genetic disorders are hereditary, meaning the genetic change is passed on from their parents. Other genetic changes can happen for the first time in the baby. Parents can carry a change in a gene or a chromosome without realizing it, as it may not cause them any health problems.

> ### Risk Factors for Genetic Disorders
Factors that increase your risk of having a baby with a genetic disorder include:
- Family history of a genetic disorder.
- Prior child with a genetic disorder.
- One parent has a chromosomal abnormality.
- Advanced maternal age (35 or older).
- Advanced paternal age (40 or older).
- Multiple miscarriages or prior stillbirth.
- Prenatal exposure to Drugs, Alcohol, or other Environmental Factors.

**Reference**: https://women.texaschildrens.org/program/high-risk-pregnancy-care/conditions/genetic-disorders
"""

# Commented out IPython magic to ensure Python compatibility.
# Import Dependencies -To see the graphs in the notebook.
# %matplotlib inline

# Python Imports
import math,time,random,datetime

# Data Manipulation
import numpy as np
import pandas as pd

# Visualization -This is where the graphs come in.
import matplotlib.pyplot as plt
import seaborn as sns
import missingno
plt.style.use('ggplot')

## Statistical Analysis
from scipy import stats
from scipy.stats import norm,skew

# Display all Columns
pd.set_option('display.max_columns', None)

# Ignore Warnings
import warnings
warnings.filterwarnings('ignore')

"""## 1. Loading the required Data

> I have kept my data in a folder called "dataset".
"""

# Import the train and test data.
train = pd.read_csv('/content/drive/MyDrive/Genetic_Disorder/dataset/train.csv')
test = pd.read_csv('/content/drive/MyDrive/Genetic_Disorder/dataset/test.csv')

"""## 2. Feature Engineering

> *The features you use influence more than everything else the result. No algorithm alone, to my knowledge, can supplement the information gain given by correct feature engineering.*
— Luca Massaron

**Refer**: https://towardsdatascience.com/feature-engineering-for-machine-learning-3a5e293a5114

##### 1. Target Variables
"""

## Understanding the Division of Genetic Disorders.
table1 = pd.pivot_table(train, index= ['Genetic Disorder', 'Disorder Subclass'], values= 'Patient Age', aggfunc= np.mean)
table1

"""- From the above Pivot Table we understand two things:-
  
  1. The different Disorders for each Genetic Disorder.
  2. The Average Age of Patients for each Genetic Disorder is ~ 7.
"""

# This loop assign these values to the Missing Values according to the Disorder Subclass.
for i in range(0,22083):
    if (train['Genetic Disorder'].isnull()[i] == True):
        if (train['Disorder Subclass'][i] == "Leber's hereditary optic neuropathy"):
          train['Genetic Disorder'][i] = 'Mitochondrial genetic inheritance disorders'
        elif (train['Disorder Subclass'][i] == 'Leigh syndrome'):
          train['Genetic Disorder'][i] = 'Mitochondrial genetic inheritance disorders'
        elif (train['Disorder Subclass'][i] == 'Mitochondrial myopathy'):
          train['Genetic Disorder'][i] = 'Mitochondrial genetic inheritance disorders'
        elif (train['Disorder Subclass'][i] == "Alzheimer's"):
          train['Genetic Disorder'][i] = 'Multifactorial genetic inheritance disorders'
        elif (train['Disorder Subclass'][i] == 'Cancer'):
          train['Genetic Disorder'][i] = 'Multifactorial genetic inheritance disorders'
        elif (train['Disorder Subclass'][i] == 'Diabetes'):
          train['Genetic Disorder'][i] = 'Multifactorial genetic inheritance disorders'
        elif (train['Disorder Subclass'][i] == "Cystic fibrosis"):
          train['Genetic Disorder'][i] = 'Single-gene inheritance diseases'
        elif (train['Disorder Subclass'][i] == 'Hemochromatosis'):
          train['Genetic Disorder'][i] = 'Single-gene inheritance diseases'
        elif (train['Disorder Subclass'][i] == 'Tay-Sachs'):
          train['Genetic Disorder'][i] = 'Single-gene inheritance diseases'
        else:
          pass
    else:
      continue

"""- We now need to understand which Disorder Subclass is frequently occuring for each Genetic Disorder."""

## Understanding the Division of Genetic Disorders.
table2 = pd.pivot_table(train, index= ['Genetic Disorder', 'Disorder Subclass'], values= 'Patient Id', aggfunc= 'count')
table2

# This loop assign these values to the Missing Values according to the Most Frequent Disorder Subclass for each Genetic Disorder.
for i in range(0,22083):
    if (train['Disorder Subclass'].isnull()[i] == True):
        if (train['Genetic Disorder'][i] == "Mitochondrial genetic inheritance disorders"):
          train['Disorder Subclass'][i] = 'Leigh syndrome'
        elif (train['Genetic Disorder'][i] == "Multifactorial genetic inheritance disorders"):
          train['Disorder Subclass'][i] = 'Diabetes'
        elif (train['Genetic Disorder'][i] == "Single-gene inheritance diseases"):
          train['Disorder Subclass'][i] = 'Cystic fibrosis'
        else:
          pass
    else:
      continue

print(f'The Missing Values in Disorder Subclass Column is: {train["Disorder Subclass"].isnull().sum()}')
print(f'The Missing Values in Genetic Disorder Column is: {train["Genetic Disorder"].isnull().sum()}')

## Dropping the Missing Values from the Target Variables.
train.dropna(subset=['Genetic Disorder', "Disorder Subclass"], inplace= True)

train.shape

"""##### 2. Explanatory Variables"""

## Proper Indexing
train.insert(0, '', range(0, 0 + len(train)))
train.set_index('', inplace= True)

## Dropping all Unnecessary Columns
train.drop(columns= ['Patient Id', 'Place of birth', 'H/O serious maternal illness', 'Patient First Name', 'Family Name', "Father's name",
                     'Institute Name', 'Location of Institute'], inplace= True)

test.drop(columns= ['Patient Id', 'Place of birth', 'H/O serious maternal illness', 'Patient First Name', 'Family Name', "Father's name",
                     'Institute Name', 'Location of Institute'], inplace= True)

train.shape

"""###### Patient Age"""

train['Patient Age'].describe()

## Filling the Missing Values with the Average Mean.
train['Patient Age'].fillna(round(train['Patient Age'].mean()), inplace= True)

## Missing Values
train['Patient Age'].isnull().any()

## Checking for Outliers
plt.figure(figsize= (10,6))

plt.subplot(2,2,1)
sns.boxplot(x= 'Patient Age', data= train)
plt.title('Train Data')
plt.subplot(2,2,2)
sns.boxplot(x= 'Patient Age', data= test)
plt.title('Test Data')

plt.show()

"""###### Inherited from Father"""

train['Inherited from father'].unique()

## Filling Missing Values with 'No'
#### train['Inherited from father'].fillna('No', inplace= True)
#### test['Inherited from father'].fillna('No', inplace= True)

### Train Data
for i in range(0,21805):
    if (train['Inherited from father'].isnull()[i] == True):
        if (train['Paternal gene'][i] == "Yes"):
          train['Inherited from father'][i] = 'Yes'
        elif (train['Paternal gene'][i] == "No"):
          train['Inherited from father'][i] = 'No'
        else:
          train['Inherited from father'][i] = 'No'
    else:
      continue


### Test Data
for i in range(0,9465):
    if (test['Inherited from father'].isnull()[i] == True):
        if (test['Paternal gene'][i] == "Yes"):
          test['Inherited from father'][i] = 'Yes'
        elif (test['Paternal gene'][i] == "No"):
          test['Inherited from father'][i] = 'No'
        else:
          test['Inherited from father'][i] = 'No'
    else:
      continue

train['Inherited from father'].value_counts()

"""###### Maternal Gene"""

train['Maternal gene'].unique()

## Filling Missing Values with 'No'
## train['Maternal gene'].fillna('No', inplace= True)
## test['Maternal gene'].fillna('No', inplace= True)

### Train Data
for i in range(0,21805):
    if (train['Maternal gene'].isnull()[i] == True):
        if (train["Genes in mother's side"][i] == "Yes"):
          train['Maternal gene'][i] = 'Yes'
        elif (train["Genes in mother's side"][i] == "No"):
          train['Maternal gene'][i] = 'No'
        else:
          train['Maternal gene'][i] = 'No'
    else:
      continue


### Test Data
for i in range(0,9465):
    if (test['Maternal gene'].isnull()[i] == True):
        if (test["Genes in mother's side"][i] == "Yes"):
          test['Maternal gene'][i] = 'Yes'
        elif (test["Genes in mother's side"][i] == "No"):
          test['Maternal gene'][i] = 'No'
        else:
          test['Maternal gene'][i] = 'No'
    else:
      continue

train['Maternal gene'].value_counts()

"""###### Blood cell count (mcL)"""

## Checking the Distribution
plt.figure(figsize= (10,6))

plt.subplot(2,2,1)
sns.distplot(train['Blood cell count (mcL)'])
plt.title('Train Data')
plt.subplot(2,2,2)
sns.distplot(test['Blood cell count (mcL)'])
plt.title('Test Data')

plt.show()

## Checking for Outliers
plt.figure(figsize= (10,6))

plt.subplot(2,2,1)
sns.boxplot(x= 'Blood cell count (mcL)', data= train)
plt.title('Train Data')
plt.subplot(2,2,2)
sns.boxplot(x= 'Blood cell count (mcL)', data= test)
plt.title('Test Data')

plt.show()

## Z-Score --> When Feature follows Normal Distibution.

### Train Dataset
mean = train['Blood cell count (mcL)'].mean()
std = train['Blood cell count (mcL)'].std()

Upper_Bound = mean + (3*std)
Lower_Bound = mean - (3*std)

train['Blood cell count (mcL)'][train['Blood cell count (mcL)'] < Lower_Bound] = Lower_Bound
train['Blood cell count (mcL)'][train['Blood cell count (mcL)'] > Upper_Bound] = Upper_Bound




### Test Dataset
mean = test['Blood cell count (mcL)'].mean()
std = test['Blood cell count (mcL)'].std()

Upper_Bound = mean + (3*std)
Lower_Bound = mean - (3*std)

test['Blood cell count (mcL)'][test['Blood cell count (mcL)'] < Lower_Bound] = Lower_Bound
test['Blood cell count (mcL)'][test['Blood cell count (mcL)'] > Upper_Bound] = Upper_Bound

"""###### Mother's Age  && Father's Age"""

## Filling the Missing Values with the Average Mean.
train["Mother's age"].fillna(round(train["Mother's age"].mean()), inplace= True)

## Filling the Missing Values with the Average Mean.
train["Father's age"].fillna(round(train["Father's age"].mean()), inplace= True)

"""###### Respiratory Rate (breaths/min)"""

## Filling Missing Values with 'Normal (30-60)'
## train['Respiratory Rate (breaths/min)'].fillna('Normal (30-60)', inplace= True)
test['Respiratory Rate (breaths/min)'].replace('-99', np.nan, inplace= True)
## test['Respiratory Rate (breaths/min)'].fillna('Normal (30-60)', inplace= True)


### Train Data
for i in range(0,21805):
    if (train['Respiratory Rate (breaths/min)'].isnull()[i] == True):
        if (train["Status"][i] == "Alive"):
          train['Respiratory Rate (breaths/min)'][i] = 'Normal (30-60)'
        else:
          train['Respiratory Rate (breaths/min)'][i] = 'Tachypnea'
    else:
      continue


### Test Data
for i in range(0,9465):
    if (test['Respiratory Rate (breaths/min)'].isnull()[i] == True):
        if (test["Status"][i] == "Alive"):
          test['Respiratory Rate (breaths/min)'][i] = 'Normal (30-60)'
        else:
          test['Respiratory Rate (breaths/min)'][i] = 'Tachypnea'
    else:
      continue

train['Respiratory Rate (breaths/min)'].value_counts()

"""###### Heart Rate (rates/min"""

## Filling Missing Values with 'Normal'
## train['Heart Rate (rates/min'].fillna('Normal', inplace= True)
test['Heart Rate (rates/min'].replace('-99', np.nan, inplace= True)
## test['Heart Rate (rates/min'].fillna('Normal', inplace= True)


### Train Data
for i in range(0,21805):
    if (train['Heart Rate (rates/min'].isnull()[i] == True):
        if (train["Respiratory Rate (breaths/min)"][i] == "Normal (30-60)"):
          train['Heart Rate (rates/min'][i] = 'Normal'
        else:
          train['Heart Rate (rates/min'][i] = 'Tachycardia'
    else:
      continue


### Test Data
for i in range(0,9465):
    if (test['Heart Rate (rates/min'].isnull()[i] == True):
        if (test["Respiratory Rate (breaths/min)"][i] == "Normal (30-60)"):
          test['Heart Rate (rates/min'][i] = 'Normal'
        else:
          test['Heart Rate (rates/min'][i] = 'Tachycardia'
    else:
      continue

train['Heart Rate (rates/min'].value_counts()

"""###### Test 1 - Test 5"""

train.drop(columns= ['Test 1', 'Test 2', 'Test 3', 'Test 4', 'Test 5'], inplace= True)
test.drop(columns= ['Test 1', 'Test 2', 'Test 3', 'Test 4', 'Test 5'], inplace= True)

"""###### Parental Consent"""

## Filling Missing Values with 'No'
train['Parental consent'].fillna('No', inplace= True)
test['Parental consent'].replace('-99', np.nan, inplace= True)
test['Parental consent'].fillna('No', inplace= True)

train['Parental consent'].value_counts()

"""###### Follow-up"""

# This loop is for Train Data.
for i in range(0,21805):
    if (train['Follow-up'].isnull()[i] == True):
        if (train['Respiratory Rate (breaths/min)'][i] == "Tachypnea"):
          train['Follow-up'][i] = 'High'
        elif (train['Heart Rate (rates/min'][i] == "Tachycardia"):
          train['Follow-up'][i] = 'High'
        else:
          train['Follow-up'][i] = 'Low'
    else:
      continue



test['Follow-up'].replace('-99', np.nan, inplace= True)
# This loop is for Test Data.
for i in range(0,9465):
    if (test['Follow-up'].isnull()[i] == True):
        if (test['Respiratory Rate (breaths/min)'][i] == "Tachypnea"):
          test['Follow-up'][i] = 'High'
        elif (test['Heart Rate (rates/min'][i] == "Tachycardia"):
          test['Follow-up'][i] = 'High'
        else:
          test['Follow-up'][i] = 'Low'
    else:
      continue

train['Follow-up'].value_counts()

"""###### Gender"""

train["Gender"].mode()

## Filling Missing Values with 'Ambiguous'
train['Gender'].fillna('Ambiguous', inplace= True)
test['Gender'].replace('-99', np.nan, inplace= True)
test['Gender'].fillna('Ambiguous', inplace= True)

"""###### Birth asphyxia"""

### Train Data
train["Birth asphyxia"].replace('No record', 'Not available', inplace= True)
train["Birth asphyxia"].fillna('No', inplace= True)


### Test Data
test["Birth asphyxia"].replace('No record', 'Not available', inplace= True)
test["Birth asphyxia"].replace('-99', np.nan, inplace= True)
test["Birth asphyxia"].fillna('No', inplace= True)

"""###### Autopsy shows birth defect (if applicable)"""

### Train Data
train["Autopsy shows birth defect (if applicable)"].replace('None', 'No', inplace= True)

for i in range(0,21805):
    if (train["Autopsy shows birth defect (if applicable)"].isnull()[i] == True):
        if (train['Inherited from father'][i] == "Yes"):
          train["Autopsy shows birth defect (if applicable)"][i] = 'Yes'
        else:
          train["Autopsy shows birth defect (if applicable)"][i] = 'No'
    else:
      continue



### Test Data
test["Autopsy shows birth defect (if applicable)"].replace('-99', np.nan, inplace= True)
test["Autopsy shows birth defect (if applicable)"].replace('None', 'No', inplace= True)

for i in range(0,9465):
    if (test["Autopsy shows birth defect (if applicable)"].isnull()[i] == True):
        if (test['Inherited from father'][i] == "Yes"):
          test["Autopsy shows birth defect (if applicable)"][i] = 'Yes'
        else:
          test["Autopsy shows birth defect (if applicable)"][i] = 'No'
    else:
      continue

train["Autopsy shows birth defect (if applicable)"].value_counts()

"""###### Folic acid details (peri-conceptional)"""

train["Folic acid details (peri-conceptional)"].fillna('No', inplace= True)

test["Folic acid details (peri-conceptional)"].replace('-99', np.nan, inplace= True)
test["Folic acid details (peri-conceptional)"].fillna('No', inplace= True)

train["Folic acid details (peri-conceptional)"].value_counts()

"""###### H/O radiation exposure (x-ray)"""

train["H/O radiation exposure (x-ray)"].fillna('No', inplace= True)
train["H/O radiation exposure (x-ray)"].replace('-', 'No', inplace= True)
train["H/O radiation exposure (x-ray)"].replace('Not applicable', 'No', inplace= True)


test["H/O radiation exposure (x-ray)"].replace('-99', np.nan, inplace= True)
test["H/O radiation exposure (x-ray)"].fillna('No', inplace= True)
test["H/O radiation exposure (x-ray)"].replace('-', 'No', inplace= True)
test["H/O radiation exposure (x-ray)"].replace('Not applicable', 'No', inplace= True)

train["H/O radiation exposure (x-ray)"].value_counts()

"""###### H/O substance abuse"""

train["H/O substance abuse"].fillna('No', inplace= True)
train["H/O substance abuse"].replace('-', 'No', inplace= True)
train["H/O substance abuse"].replace('Not applicable', 'No', inplace= True)


test["H/O substance abuse"].replace('-99', np.nan, inplace= True)
test["H/O substance abuse"].fillna('No', inplace= True)
test["H/O substance abuse"].replace('-', 'No', inplace= True)
test["H/O substance abuse"].replace('Not applicable', 'No', inplace= True)

train["H/O substance abuse"].value_counts()

"""###### Assisted conception IVF/ART"""

test["Assisted conception IVF/ART"].replace('-99', np.nan, inplace= True)

# This loop is for test Data.
for i in range(0,21805):
    if (train['Assisted conception IVF/ART'].isnull()[i] == True):
        if (train['Folic acid details (peri-conceptional)'][i] == "Yes"):
          train['Assisted conception IVF/ART'][i] = 'Yes'
        else:
          train['Assisted conception IVF/ART'][i] = 'No'
    else:
      continue



# This loop is for Test Data.
for i in range(0,9465):
    if (test['Assisted conception IVF/ART'].isnull()[i] == True):
        if (test['Folic acid details (peri-conceptional)'][i] == "Yes"):
          test['Assisted conception IVF/ART'][i] = 'Yes'
        else:
          test['Assisted conception IVF/ART'][i] = 'No'
    else:
      continue

train["Assisted conception IVF/ART"].value_counts()

"""###### History of Anomalies"""

train["History of anomalies in previous pregnancies"].fillna('No', inplace= True)

test["History of anomalies in previous pregnancies"].replace('-99', np.nan, inplace= True)
test["History of anomalies in previous pregnancies"].fillna('No', inplace= True)

"""###### No. of previous abortion"""

train["No. of previous abortion"].fillna(0, inplace= True)

test["No. of previous abortion"].replace(-99, 0, inplace= True)

"""###### Birth Defects

**Refer**: https://www.cdc.gov/ncbddd/birthdefects/facts.html
"""

test["Birth defects"].replace('-99', np.nan, inplace= True)

# This loop is for test Data.
for i in range(0,21805):
    if (train['Birth defects'].isnull()[i] == True):
        if (train["Mother's age"][i] > 34):
          if (train["H/O substance abuse"][i] == 'Yes'):
            train['Birth defects'][i] = 'Multiple'
          else:
            train['Birth defects'][i] = 'Singular'
        else:
            train['Birth defects'][i] = 'Singular'
    else:
      continue



# This loop is for Test Data.
for i in range(0,9465):
    if (test['Birth defects'].isnull()[i] == True):
        if (test["Mother's age"][i] > 34):
          if (test["H/O substance abuse"][i] == 'Yes'):
            test['Birth defects'][i] = 'Multiple'
          else:
            test['Birth defects'][i] = 'Singular'
        else:
            test['Birth defects'][i] = 'Singular'
    else:
      continue

train["Birth defects"].value_counts()

"""###### White Blood cell count (thousand per microliter)"""

train["White Blood cell count (thousand per microliter)"].fillna(train["White Blood cell count (thousand per microliter)"].mean(), inplace= True)

test["White Blood cell count (thousand per microliter)"].replace(-99, np.nan, inplace= True)
test["White Blood cell count (thousand per microliter)"].fillna(test["White Blood cell count (thousand per microliter)"].mean(), inplace= True)

## Checking for Outliers
plt.figure(figsize= (10,6))

plt.subplot(2,2,1)
sns.boxplot(x= 'White Blood cell count (thousand per microliter)', data= train)
plt.title('Train Data')
plt.subplot(2,2,2)
sns.boxplot(x= 'White Blood cell count (thousand per microliter)', data= test)
plt.title('Test Data')

plt.show()

"""###### Blood test result

**Refer**: https://childrensoncologygroup.org/lowwhitebloodcellcount
"""

## Understanding the Division of Genetic Disorders.
table3 = pd.pivot_table(train, index= ['Blood test result'],
                        values= 'White Blood cell count (thousand per microliter)', aggfunc= np.mean)
table3

## train["Blood test result"].fillna('slightly abnormal', inplace= True)
## test["Blood test result"].fillna('slightly abnormal', inplace= True)

test["Blood test result"].replace('-99', np.nan, inplace= True)

# This loop is for test Data.
for i in range(0,21805):
    if (train['Blood test result'].isnull()[i] == True):
        if (5 < train["White Blood cell count (thousand per microliter)"][i] < 10):
          train['Blood test result'][i] = 'normal'
        elif (10 < train["White Blood cell count (thousand per microliter)"][i] < 1):
          train['Blood test result'][i] = 'abnormal'
        elif (1 < train["White Blood cell count (thousand per microliter)"][i] > 4):
          train['Blood test result'][i] = 'slightly abnormal'
        else:
            train['Blood test result'][i] = 'inconclusive'
    else:
      continue



# This loop is for Test Data.
for i in range(0,9465):
    if (test['Blood test result'].isnull()[i] == True):
        if (5 < test["White Blood cell count (thousand per microliter)"][i] < 10):
          test['Blood test result'][i] = 'normal'
        elif (10 < test["White Blood cell count (thousand per microliter)"][i] < 1):
          test['Blood test result'][i] = 'abnormal'
        elif (1 < test["White Blood cell count (thousand per microliter)"][i] > 4):
          test['Blood test result'][i] = 'slightly abnormal'
        else:
            test['Blood test result'][i] = 'inconclusive'
    else:
      continue

train["Blood test result"].value_counts()

"""###### Symptom 1- Symptom 5"""

train["Symptom 1"].fillna(0, inplace= True)
train["Symptom 2"].fillna(0, inplace= True)
train["Symptom 3"].fillna(0, inplace= True)
train["Symptom 4"].fillna(0, inplace= True)
train["Symptom 5"].fillna(0, inplace= True)


## Replacing Boolean values
test["Symptom 1"] = np.where(test["Symptom 1"] == True, 1, 0)
test["Symptom 2"] = np.where(test["Symptom 2"] == True, 1, 0)
test["Symptom 3"] = np.where(test["Symptom 3"] == True, 1, 0)
test["Symptom 4"] = np.where(test["Symptom 4"] == True, 1, 0)
test["Symptom 5"] = np.where(test["Symptom 5"] == True, 1, 0)

"""### Feature Encoding"""

train.head(25)

# Obtaining the Categorical Columns
categorical_features = [features for features in train.columns if train[features].dtypes == 'O']
categorical_features

# Obtaining the Categorical Columns
categorical_features_test = [features for features in test.columns if test[features].dtypes == 'O']

from sklearn.preprocessing import OneHotEncoder, LabelEncoder

label_encoder = LabelEncoder()
for feature in categorical_features:
    ## Encode labels in all Categorical Columns.
    train[feature]= label_encoder.fit_transform(train[feature])



for features in categorical_features_test:
    ## Encode labels in all Categorical Columns.
    test[features]= label_encoder.fit_transform(test[features])

train.head(25)

"""### Feature Scaling"""

# Obtaining Numerical Columns
numerical_features = [features for features in train.columns if train[features].dtypes != 'O']
numerical_features

# Selecting all Features that need to be Scaled except the Target Variable.
scale_feature = [features for features in numerical_features if features not in ['Genetic Disorder', 'Disorder Subclass', "Genes in mother's side",
                                                                                 'Inherited from father', 'Maternal gene', 'Paternal gene',
                                                                                 'Status', 'Respiratory Rate (breaths/min)',
                                                                                 'Heart Rate (rates/min', 'Parental consent', 'Follow-up',
                                                                                 'Gender', 'Birth asphyxia',
                                                                                 'Autopsy shows birth defect (if applicable)',
                                                                                 'Folic acid details (peri-conceptional)',
                                                                                 'H/O radiation exposure (x-ray)', 'H/O substance abuse',
                                                                                 'Assisted conception IVF/ART', 'Symptom 1', 'Symptom 2',
                                                                                 'Symptom 3', 'Symptom 4', 'Symptom 5',
                                                                                 'History of anomalies in previous pregnancies',
                                                                                 'Birth defects', 'Blood test result']]

from sklearn.preprocessing import RobustScaler
scaler = RobustScaler()


# Transform the train set and add the 'Genetic Disorder', 'Disorder Subclass' Columns.
train = pd.concat([train[['Genetic Disorder', 'Disorder Subclass', "Genes in mother's side", 'Inherited from father', 'Maternal gene',
                          'Paternal gene', 'Status', 'Respiratory Rate (breaths/min)', 'Heart Rate (rates/min', 'Parental consent', 'Follow-up',
                          'Gender', 'Birth asphyxia', 'Autopsy shows birth defect (if applicable)', 'Folic acid details (peri-conceptional)',
                          'H/O radiation exposure (x-ray)', 'H/O substance abuse', 'Assisted conception IVF/ART', 'Symptom 1', 'Symptom 2',
                          'Symptom 3', 'Symptom 4', 'Symptom 5', 'History of anomalies in previous pregnancies', 'Birth defects',
                          'Blood test result']].reset_index(drop= True),
       pd.DataFrame(scaler.fit_transform(train[scale_feature]), columns= scale_feature)], axis= 1)
       ## Converting to Dataframe as after transform its an array.

train.head()

# Selecting all Features that need to be Scaled except the Target Variable.
scale_feature = [features for features in numerical_features if features not in ['Genetic Disorder', 'Disorder Subclass', "Genes in mother's side",
                                                                                 'Inherited from father', 'Maternal gene', 'Paternal gene',
                                                                                 'Status', 'Respiratory Rate (breaths/min)',
                                                                                 'Heart Rate (rates/min', 'Parental consent', 'Follow-up',
                                                                                 'Gender', 'Birth asphyxia',
                                                                                 'Autopsy shows birth defect (if applicable)',
                                                                                 'Folic acid details (peri-conceptional)',
                                                                                 'H/O radiation exposure (x-ray)', 'H/O substance abuse',
                                                                                 'Assisted conception IVF/ART', 'Symptom 1', 'Symptom 2',
                                                                                 'Symptom 3', 'Symptom 4', 'Symptom 5',
                                                                                 'History of anomalies in previous pregnancies',
                                                                                 'Birth defects', 'Blood test result']]

from sklearn.preprocessing import RobustScaler
scaler = RobustScaler()


# Transform the test set and add the remaining Column.
test = pd.concat([test[["Genes in mother's side", 'Inherited from father', 'Maternal gene',
                        'Paternal gene', 'Status', 'Respiratory Rate (breaths/min)', 'Heart Rate (rates/min', 'Parental consent',
                        'Follow-up', 'Gender', 'Birth asphyxia', 'Autopsy shows birth defect (if applicable)',
                        'Folic acid details (peri-conceptional)', 'H/O radiation exposure (x-ray)', 'H/O substance abuse',
                        'Assisted conception IVF/ART', 'Symptom 1', 'Symptom 2', 'Symptom 3', 'Symptom 4', 'Symptom 5',
                        'History of anomalies in previous pregnancies', 'Birth defects', 'Blood test result']].reset_index(drop= True),
       pd.DataFrame(scaler.fit_transform(test[scale_feature]), columns= scale_feature)], axis= 1)
       ## Converting to Dataframe as after transform its an array.

test.head()

"""### Feature Selection"""

## Capture the Independent Variables
X = train.drop(columns= ['Genetic Disorder','Disorder Subclass'], axis= 1)

## Capture the Dependent Variable
y1 = train['Genetic Disorder']
y2 = train['Disorder Subclass']

from sklearn.ensemble import ExtraTreesClassifier

## Genetic Disorder
model = ExtraTreesClassifier()
model.fit(X,y1)

## Disorder Subclass
model2 = ExtraTreesClassifier()
model2.fit(X,y2)

print('Y1')
print(model.feature_importances_)
print()
print('Y2')
print(model2.feature_importances_)

ranked_features = pd.Series(model.feature_importances_, index= X.columns)
ranked_features.nlargest(19)

ranked_features2 = pd.Series(model2.feature_importances_, index= X.columns)
ranked_features2.nlargest(19)

ranked_features2.nlargest(19).index

X = X[['White Blood cell count (thousand per microliter)', 'Blood cell count (mcL)', 'Patient Age', "Father's age", "Mother's age",
       'No. of previous abortion', 'Blood test result', 'Gender', 'Birth asphyxia', 'Symptom 5', 'Heart Rate (rates/min',
       'Respiratory Rate (breaths/min)', 'Folic acid details (peri-conceptional)', 'History of anomalies in previous pregnancies',
       'Autopsy shows birth defect (if applicable)', 'Assisted conception IVF/ART', 'Symptom 4', 'Follow-up', 'Birth defects']]

X.head()

X.shape

test = test[['White Blood cell count (thousand per microliter)', 'Blood cell count (mcL)', 'Patient Age', "Father's age",
             "Mother's age", 'No. of previous abortion', 'Blood test result', 'Gender', 'Birth asphyxia', 'Symptom 5',
             'Heart Rate (rates/min', 'Respiratory Rate (breaths/min)', 'Folic acid details (peri-conceptional)',
             'History of anomalies in previous pregnancies', 'Autopsy shows birth defect (if applicable)',
             'Assisted conception IVF/ART', 'Symptom 4', 'Follow-up', 'Birth defects']]

test.head()

## Combining the Target Variables.
 train = pd.concat([X, y1,y2], axis=1)
 train.head(585)

## Re-checking for Missing Values
train.isnull().any()

## Re-checking for Missing Values
test.isnull().any()

train.to_csv('/content/drive/MyDrive/Genetic_Disorder/Final_train.csv', index=False)
test.to_csv('/content/drive/MyDrive/Genetic_Disorder/Final_test.csv', index=False)

X = train.drop(columns=['Genetic Disorder'], axis=1)
Y = train['Genetic Disorder']

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

X_train.shape

X_train.head(5)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train, Y_train)

from sklearn.metrics import accuracy_score
X_train_prediction = model.predict(X_train)
# print(X_train_prediction)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy)

from sklearn.model_selection import cross_val_score

cv_scores = cross_val_score(model, X_train, Y_train, cv=5, scoring='accuracy')
print("Cross-Validation Accuracy Scores:", cv_scores)
print("Mean Cross-Validation Accuracy:", cv_scores.mean())

from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict probabilities for the positive class
y_proba = model.predict_proba(X_train)[:, 1]  # Take probabilities for the positive class

# RMSE
rmse = np.sqrt(mean_squared_error(Y_train, y_proba))
print("RMSE:", rmse)

# R²
r2 = r2_score(Y_train, y_proba)
print("R²:", r2)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ', test_data_accuracy)

from sklearn.model_selection import cross_val_score

cv_scores = cross_val_score(model, X_test, Y_test, cv=5, scoring='accuracy')
print("Cross-Validation Accuracy Scores:", cv_scores)
print("Mean Cross-Validation Accuracy:", cv_scores.mean())

from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict probabilities for the positive class
y_pred = model.predict_proba(X_test)[:, 1]  # Take probabilities for the positive class
# y_pred = model.predict(X_train)
# RMSE
rmse = np.sqrt(mean_squared_error(Y_test, y_pred))
print("RMSE:", rmse)

# R²
r2 = r2_score(Y_test, y_pred)
print("R²:", r2)

test.head(2)

test.shape

import numpy as np
import pickle  # Assuming the model is saved using pickle

# Input data (sample data)
input_data = (0.652979, -0.511845, -0.714286, 0.000000, 0.000000, -0.666667, 2, 0, 0, 1.0, 0, 0, 0, 1, 1, 0, 1.0, 0, 1,5)
# input_data = (
#     -0.541763, 0.042123, -0.428571, -1.357143, 0.000000, -0.666667,
#     2, 0, 0, 0.0, 0, 1, 1, 1, 2, 0, 1.0, 0, 0, 2
# )
# Convert input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)


# Reshape for prediction (predicting for a single instance)
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

# Make a prediction
prediction = model.predict(input_data_reshaped)

# Output the prediction result
# if prediction[0] == 0:
#     print('The person does NOT have the genetic disorder.')
# else:
#     print('The person HAS the genetic disorder.')
print(prediction[0])

X1 = train.drop(columns=['Disorder Subclass'], axis=1)
Y1 = train['Disorder Subclass']

from sklearn.model_selection import train_test_split

X1_train, X1_test, Y1_train, Y1_test = train_test_split(X1, Y1, test_size=0.2, stratify=Y1, random_state=2)

X1_train.shape

X1_train.tail(5)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X1_train, Y1_train)

from sklearn.metrics import accuracy_score
X1_train_prediction = model.predict(X1_train)
# print(X_train_prediction)
training_data_accuracy1 = accuracy_score(X1_train_prediction, Y1_train)

print('Accuracy on Training data : ', training_data_accuracy1)

from sklearn.model_selection import cross_val_score

cv_scores = cross_val_score(model, X1_train, Y1_train, cv=5, scoring='accuracy')
print("Cross-Validation Accuracy Scores:", cv_scores)
print("Mean Cross-Validation Accuracy:", cv_scores.mean())

from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict probabilities for the positive class
y_pred = model.predict_proba(X1_train)[:, 1]  # Take probabilities for the positive class
# y_pred = model.predict(X_train)
# RMSE
rmse = np.sqrt(mean_squared_error(Y1_train, y_pred))
print("RMSE:", rmse)

# R²
r2 = r2_score(Y1_train, y_pred)
print("R²:", r2)

X1_test_prediction = model.predict(X1_test)
test_data_accuracy1 = accuracy_score(X1_test_prediction, Y1_test)

print('Accuracy on Test data : ', test_data_accuracy1)

from sklearn.model_selection import cross_val_score

cv_scores = cross_val_score(model, X1_test, Y1_test, cv=5, scoring='accuracy')
print("Cross-Validation Accuracy Scores:", cv_scores)
print("Mean Cross-Validation Accuracy:", cv_scores.mean())

from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict probabilities for the positive class
y_pred = model.predict_proba(X1_test)[:, 1]  # Take probabilities for the positive class
# y_pred = model.predict(X_train)
# RMSE
rmse = np.sqrt(mean_squared_error(Y1_test, y_pred))
print("RMSE:", rmse)

# R²
r2 = r2_score(Y1_test, y_pred)
print("R²:", r2)

test.shape

import numpy as np
import pickle  # Assuming the model is saved using pickle

# Input data (sample data)
input_data = (-1.236988, 0.993794, -0.428571, -0.571429, 0.272727, 0.000000, 0, 2, 1, 1.0, 1, 1, 1, 1, 2, 1, 1.0, 1, 0, 1)


# input_data = (
#     -0.541763, 0.042123, -0.428571, -1.357143, 0.000000, -0.666667,
#     2, 0, 0, 0.0, 0, 1, 1, 1, 2, 0, 1.0, 0, 0, 2
# )
# Convert input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)


# Reshape for prediction (predicting for a single instance)
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

# Make a prediction
prediction = model.predict(input_data_reshaped)

# Output the prediction result
# if prediction[0] == 0:
#     print('The person does NOT have the genetic disorder.')
# else:
#     print('The person HAS the genetic disorder.')
print(prediction[0])

X2 = train.drop(columns=['Genetic Disorder','Disorder Subclass'], axis=1)
Y2 = train['Disorder Subclass']
# Y2 = Y2.loc[:, ~Y2.column.duplicated()]
print(Y2)

from sklearn.model_selection import train_test_split

X2_train, X2_test, Y2_train, Y2_test = train_test_split(X2, Y2, test_size=0.2, stratify=Y2, random_state=2)

X2_train.shape

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X2_train, Y2_train)

from sklearn.metrics import accuracy_score
X2_train_prediction = model.predict(X2_train)
# print(X_train_prediction)
training_data_accuracy2 = accuracy_score(X2_train_prediction, Y2_train)

print('Accuracy on Training data : ', training_data_accuracy2)

from sklearn.model_selection import cross_val_score

cv_scores = cross_val_score(model, X2_train, Y2_train, cv=5, scoring='accuracy')
print("Cross-Validation Accuracy Scores:", cv_scores)
print("Mean Cross-Validation Accuracy:", cv_scores.mean())

from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict probabilities for the positive class
y_pred = model.predict_proba(X2_train)[:, 1]  # Take probabilities for the positive class
# y_pred = model.predict(X_train)
# RMSE
rmse = np.sqrt(mean_squared_error(Y2_train, y_pred))
print("RMSE:", rmse)

# R²
r2 = r2_score(Y2_train, y_pred)
print("R²:", r2)

X2_test_prediction = model.predict(X2_test)
test_data_accuracy2 = accuracy_score(X2_test_prediction, Y2_test)
print('Accuracy on Test data : ', test_data_accuracy2)

from sklearn.model_selection import cross_val_score

cv_scores = cross_val_score(model, X2_test, Y2_test, cv=5, scoring='accuracy')
print("Cross-Validation Accuracy Scores:", cv_scores)
print("Mean Cross-Validation Accuracy:", cv_scores.mean())

from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict probabilities for the positive class
y_pred = model.predict_proba(X2_test)[:, 1]  # Take probabilities for the positive class
# y_pred = model.predict(X_train)
# RMSE
rmse = np.sqrt(mean_squared_error(Y2_test, y_pred))
print("RMSE:", rmse)

# R²
r2 = r2_score(Y2_test, y_pred)
print("R²:", r2)

import numpy as np
import pickle  # Assuming the model is saved using pickle

# Input data (sample data)
input_data = (-0.934318, -0.659137, 0.571429, 0.000000, -0.272727, 0.666667, 3, 2, 1, 0.0, 1, 1, 0, 0, 1, 1, 0.0, 1, 0)






# input_data = (
#     -0.541763, 0.042123, -0.428571, -1.357143, 0.000000, -0.666667,
#     2, 0, 0, 0.0, 0, 1, 1, 1, 2, 0, 1.0, 0, 0, 2
# )
# Convert input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)


# Reshape for prediction (predicting for a single instance)
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

# Make a prediction
prediction = model.predict(input_data_reshaped)

# Output the prediction result
# if prediction[0] == 0:
#     print('The person does NOT have the genetic disorder.')
# else:
#     print('The person HAS the genetic disorder.')
print(prediction[0])

X3 = train.drop(columns=['Genetic Disorder','Disorder Subclass'], axis=1)
Y3 = train[['Genetic Disorder','Disorder Subclass']]
Y3 = Y3.loc[:, ~Y3.columns.duplicated()]
train.head(5)

from sklearn.model_selection import train_test_split

X3_train, X3_test, Y3_train, Y3_test = train_test_split(X3, Y3, test_size=0.2, stratify=Y3, random_state=2)

from sklearn.multioutput import MultiOutputClassifier
from sklearn.ensemble import RandomForestClassifier
model = MultiOutputClassifier(RandomForestClassifier())
model.fit(X3_train, Y3_train)
# model.fit(X3_train, Y3_train)
y_pred = model.predict(X3_test)

from sklearn.model_selection import cross_val_score

# Perform cross-validation for each target
for i, col in enumerate(Y3_train.columns):  # Assuming Y3_train is a DataFrame
    scores = cross_val_score(RandomForestClassifier(), X3_train, Y3_train[col], cv=5, scoring='accuracy')
    print(f"Cross-Validation Scores for target {col}: {scores}")
    print(f"Mean CV Score for target {col}: {scores.mean()}")

from sklearn.metrics import mean_squared_error
import numpy as np

# Calculate RMSE for each target
for i, col in enumerate(Y3_test.columns):  # Assuming Y3_test is a DataFrame
    rmse = np.sqrt(mean_squared_error(Y3_test[col], y_pred[:, i]))
    print(f"RMSE for target {col}: {rmse}")
from sklearn.metrics import r2_score

# Calculate R² for each target
for i, col in enumerate(Y3_test.columns):  # Assuming Y3_test is a DataFrame
    r2 = r2_score(Y3_test[col], y_pred[:, i])
    print(f"R² for target {col}: {r2}")

import numpy as np
import pickle  # Assuming the model is saved using pickle

# Input data (sample data)
input_data = (0.100000, -0.022004, -0.142857, -1.428571, 0.545455, 0.666667, 2, 0, 1, 1.0, 1, 0, 1, 1, 1, 1, 1.0, 1, 1)

# Convert input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)


# Reshape for prediction (predicting for a single instance)
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

# Make a prediction
prediction = model.predict(input_data_reshaped)

# Output the prediction result
print("Genetic Disorder  - ",end=" ")
if(prediction[0][0]==0):
    print('Mitochondrial genetic inheritance disorders')
elif(prediction[0][0]==1):
    print('Multifactorial genetic inheritance disorders	')
elif(prediction[0][0]==2):
    print('Single-gene inheritance diseases')
else:
    print('Other genetic disorders')

print("Disorder Subclass - ",end=" ")
if(prediction[0][1]==1):
    print('Cancer')
elif(prediction[0][1]==2):
    print('Cystic fibrosis')
elif(prediction[0][1]==3):
    print('Diabetes')
elif(prediction[0][1]==4):
    print('Hemochromatosis')
elif(prediction[0][1]==5):
    print('Leber\'s hereditary optic neuropathy')
elif(prediction[0][1]==6):
    print('Leigh syndrome')
elif(prediction[0][1]==7):
    print('Mitochondrial myopathy')
elif(prediction[0][1]==8):
    print('Tay-Sachs')
elif(prediction[0][1]==9):
    print('Rheumatoid arthritis')
else:
    print("Other Disorder Subclass")

import pickle

filename = 'genetic_disorder_prediction.sav'
pickle.dump(model, open(filename, 'wb'))

# loading the saved model
loaded_model = pickle.load(open('genetic_disorder_prediction.sav', 'rb'))

for column in X3.columns:
  print(column)